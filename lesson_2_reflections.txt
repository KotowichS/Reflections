What happens when you initialize a repository? Why do you need to do it?

When you initialize a git repository it creates a hidden file '.git'. Now you need to create a commit for the new repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is the preamble to committing files to the repository. The working directory  is the directory that you are currently
using. The staging area is helpful in connecting multiple files into one commit.

How can you use the staging area to make sure you have one commit per logical change?

The staging area allows you to clearly see the changes that you are going to commit. It allows you to compare with your working directory
to see which new parts are being committed, as well as with your previous commit to discern which changes actually occured.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches will be helpful in many situations in which you would like to keep separate copies of the game in development at the same time.
Reasons can vary from alternate language editions, experimental additions, or to create separate difficulties if you are creating a game.

How do the diagrams help you visualize the branch structure?

Diagrams make it easy to spot the different branches that we have created and their previous commits.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches together causes the new commit to be the head of the master branch that contains changes made by both of the
branches. We represent it this way because it is not simply the information from one branch being added to the other, rather a new
commit is created in which information from both previous commits and their parents are put together.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

Automatic merging is fantastic when each branch is changing, adding, or removing unique functionality. If Everyone is working on the same
functions, then git is unable to automatically merge without conflict.